use std::io::Write;

use convert_case::{Case, Casing};

fn main() {
    let mut output = std::fs::File::create("../shared/cadmium-api.ts").unwrap();

    writeln!(
        output,
        "// This file is generated by the gen-types binary, do not edit"
    )
    .unwrap();
    writeln!(output, "import {{ Direction, IDType, MessageResult, Mode, Plane, PlaneDescription, StepHash }} from \"cadmium\"").unwrap();
    writeln!(
        output,
        "import {{ sendWasmMessage }} from \"./projectUtils\""
    )
    .unwrap();

    let all_defs = cadmium::Project::gen_typescript_defs();

    for (name, fields) in &all_defs {
        let iface_fields = fields.join("; ");
        let fn_name = name.to_case(Case::Camel);
        let fn_params_full = fields.join(", ");
        let fn_params = fn_params_full.trim_end_matches(", ");
        let iface_params_full = fields
            .iter()
            .map(|f| f.split(":").next().unwrap().trim())
            .collect::<Vec<_>>()
            .join(", ");
        let iface_params = iface_params_full.trim_end_matches(", ");

        writeln!(
            output,
            r#"
export interface {name} {{ {iface_fields} }}
export function {fn_name}({fn_params}): MessageResult {{
    const message: Message = {{ {name}: {{ {iface_params} }} }};
    return sendWasmMessage(message);
}}"#
        )
        .unwrap();
    }

    let message_variants = all_defs
        .iter()
        .map(|(name, _)| format!("{{ {name}: {name} }}"))
        .collect::<Vec<_>>()
        .join(" | ");

    writeln!(output, "export type Message = {message_variants};").unwrap();
}
