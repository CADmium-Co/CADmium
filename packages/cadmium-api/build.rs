use std::env;
use std::fs::File;
use std::io::Write;

use convert_case::{Case, Casing};

fn main() {
    let mut output =
        File::create(format!("{}/generated.rs", env::var("OUT_DIR").unwrap())).unwrap();

    writeln!(
        output,
        "// This file is generated by build script, do not edit"
    )
    .unwrap();

    let all_defs = cadmium::Project::gen_typescript_defs();

    for (name, fields) in &all_defs {
        let iface_fields = fields.join("; ");
        let fn_name = name.to_case(Case::Camel);
        let fn_params_full = fields.join(", ");
        let fn_params = fn_params_full.trim_end_matches(", ");
        let iface_params_full = fields
            .iter()
            .map(|f| f.split(":").next().unwrap().trim())
            .collect::<Vec<_>>()
            .join(", ");
        let iface_params = iface_params_full.trim_end_matches(", ");

        writeln!(
            output,
            r#"
pub fn {fn_name}({fn_params}) -> MessageResult {{
    const message: Message = {{ type: "{name}", {iface_params} }};
    return sendWasmMessage(message);
}}"#
        )
        .unwrap();
    }

    let message_variants = all_defs
        .iter()
        .map(|(name, _)| format!("{{ type: \"{name}\" }} & {name}"))
        .collect::<Vec<_>>()
        .join(" | ");

    writeln!(output, "export type Message = {message_variants};").unwrap();
}
